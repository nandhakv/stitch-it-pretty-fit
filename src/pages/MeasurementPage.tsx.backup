import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Ruler, Home, Package, Check, Info, ChevronRight, MapPin, Calendar, Clock, Navigation, Building, Briefcase, Loader, Plus, X } from 'lucide-react';
import { useOrder } from '../utils/OrderContext';
import { useAuth } from '../utils/AuthContext';
import { mockApi } from '../utils/mockApi';
import { MeasurementOption, Address } from '../utils/types';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { toast } from '@/components/ui/use-toast';

const MeasurementPage: React.FC = () => {
  const navigate = useNavigate();
  const { order, updateOrder } = useOrder();
  const { user, firebaseUser, isAuthenticated } = useAuth();
  const [measurementOptions, setMeasurementOptions] = useState<MeasurementOption[]>([]);
  const [selectedOption, setSelectedOption] = useState<"manual" | "homeService" | "oldGarment" | null>(order.measurementOption || null);
  const [loading, setLoading] = useState(true);
  const formRef = useRef<HTMLFormElement>(null);
  
  // State for address selection
  const [showHomeAddressSheet, setShowHomeAddressSheet] = useState(false);
  const [showOldGarmentAddressSheet, setShowOldGarmentAddressSheet] = useState(false);
  const [addressSelected, setAddressSelected] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(order.deliveryAddress || null);
  const [addressSelectionFor, setAddressSelectionFor] = useState<"homeService" | "oldGarment" | null>(null);
  
  // State for address management
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [loadingAddresses, setLoadingAddresses] = useState(false);
  const [selectedAddressId, setSelectedAddressId] = useState<string | undefined>(order.selectedAddressId);
  
  // State for scheduling
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>('');
  
  // Available time slots
  const timeSlots = [
    "9:00 AM - 11:00 AM",
    "11:00 AM - 1:00 PM",
    "2:00 PM - 4:00 PM",
    "4:00 PM - 6:00 PM"
  ];
  
  // Get available dates (next 7 days)
  const getAvailableDates = () => {
    const dates = [];
    const today = new Date();
    
    // Start from tomorrow
    for (let i = 1; i <= 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      dates.push({
        value: date.toISOString().split('T')[0],
        label: date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })
      });
    }
    
    return dates;
  };
  
  const availableDates = getAvailableDates();
  
  // State for manual measurements
  const [measurements, setMeasurements] = useState({
    bust: order.measurements?.bust || '',
    waist: order.measurements?.waist || '',
    hips: order.measurements?.hips || '',
    shoulderToWaist: order.measurements?.shoulderToWaist || '',
    armLength: order.measurements?.armLength || '',
    armHole: order.measurements?.armHole || '',
    armCircumference: order.measurements?.armCircumference || '',
    neckDepthFront: order.measurements?.neckDepthFront || '',
    neckDepthBack: order.measurements?.neckDepthBack || '',
    additional: order.measurements?.additional || ''
  });
  
  // Track form validity
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [isFormValid, setIsFormValid] = useState(false);
  
  useEffect(() => {
    mockApi.getMeasurementOptions().then((data) => {
      setMeasurementOptions(data);
      setLoading(false);
    });
  }, []);
  
  const getIconComponent = (iconName: string) => {
    switch (iconName) {
      case 'pencil':
        return <Ruler className="h-5 w-5 text-plum" />;
      case 'home':
        return <Home className="h-5 w-5 text-plum" />;
      case 'package':
        return <Package className="h-5 w-5 text-plum" />;
      default:
        return <Ruler className="h-5 w-5 text-plum" />;
    }
  };
  
  const handleOptionSelect = (id: "manual" | "homeService" | "oldGarment") => {
    setSelectedOption(id);
  };
  
  // Handle input change for manual measurements
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setMeasurements(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error for this field
    if (formErrors[name]) {
      setFormErrors(prev => {
        const updated = { ...prev };
        delete updated[name];
        return updated;
      });
    }
  };
  
  // Validate manual measurements form and scheduling
  useEffect(() => {
    if (selectedOption === 'manual') {
      const requiredFields = [
        'bust', 'waist', 'hips', 'shoulderToWaist', 
        'armLength', 'armHole', 'armCircumference', 
        'neckDepthFront', 'neckDepthBack'
      ];
      
      const errors: Record<string, string> = {};
      let valid = true;
      
      requiredFields.forEach(field => {
        if (!measurements[field as keyof typeof measurements]) {
          errors[field] = `${field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} is required`;
          valid = false;
        }
      });
      
      setFormErrors(errors);
      setIsFormValid(valid);
    }
  }, [measurements, selectedOption]);
  
  // Fetch addresses from API
  const fetchAddresses = async () => {
    if (!firebaseUser) return;
    
    try {
      setLoadingAddresses(true);
      
      // In a real app, you'd fetch from your actual API with the token
      // This is mocked for demonstration
      setTimeout(() => {
        // Mock data
        const mockAddresses: Address[] = [
          {
            id: 'addr1',
            fullName: 'Home',
            addressLine1: '123 Main Street, Apartment 4B',
            doorNo: '123',
            pincode: '560001',
            phone: '9876543210',
            isDefault: true,
            type: 'home',
            area: 'MG Road'
          },
          {
            id: 'addr2',
            fullName: 'Office',
            addressLine1: '456 Work Plaza, Floor 12',
            doorNo: '456',
            pincode: '560002',
            phone: '9876543211',
            isDefault: false,
            type: 'work',
            area: 'Whitefield'
          },
          {
            id: 'addr3',
            fullName: 'Parents Home',
            addressLine1: '789 Family Lane',
            doorNo: '789',
            pincode: '600001',
            phone: '9876543212',
            isDefault: false,
            type: 'home',
            area: 'T Nagar'
          }
        ];

        setAddresses(mockAddresses);
        setLoadingAddresses(false);
      }, 500);
    } catch (error) {
      console.error('Error loading addresses:', error);
      toast({
        title: "Failed to load addresses",
        description: "There was an error loading your addresses. Please try again.",
        variant: "destructive"
      });
      setLoadingAddresses(false);
    }
  };
  
  const handleAddressSelect = (address: Address) => {
    // Update selected address
    setSelectedAddress(address);
    setSelectedAddressId(address.id);
    setAddressSelected(true);
    
    // Update order context
    updateOrder({
      ...order,
      deliveryAddress: address,
      deliveryPincode: address.pincode,
      selectedAddressId: address.id
    });
    
    // Save to localStorage for persistence
    localStorage.setItem('userPincode', address.pincode);
    localStorage.setItem('selectedAddressId', address.id);
    
    // Close both address sheets
    setShowHomeAddressSheet(false);
    setShowOldGarmentAddressSheet(false);
    
    // Show appropriate toast message based on which option is being used
    if (addressSelectionFor === 'homeService') {
      toast({
        title: "Address Selected",
        description: `Delivery address set to ${address.area}, ${address.pincode}`,
      });
    } else if (addressSelectionFor === 'oldGarment') {
      toast({
        title: "Address Selected",
        description: `Pickup address set to ${address.area}, ${address.pincode}`,
      });
    }
  };
  
  const handleManualPincodeSubmit = (pincode: string) => {
    setAddressSelected(true);
    
    // Update order with just the pincode (no full address)
    updateOrder({
      ...order,
      deliveryPincode: pincode,
      selectedAddressId: undefined,
      deliveryAddress: undefined
    });
    
    // Save to localStorage
    localStorage.setItem('userPincode', pincode);
    localStorage.removeItem('selectedAddressId');
    
    // Close both sheets
    setShowHomeAddressSheet(false);
    setShowOldGarmentAddressSheet(false);
  };
  
  const handleAddressClick = (option: "homeService" | "oldGarment") => {
    // Set which option is requesting the address
    setAddressSelectionFor(option);
    
    // Fetch addresses when opening the sheet
    if (isAuthenticated && firebaseUser) {
      fetchAddresses();
    }
    
    // Show the appropriate address sheet
    if (option === 'homeService') {
      setShowHomeAddressSheet(true);
    } else {
      setShowOldGarmentAddressSheet(true);
    }
  };
  
  // For direct access from the Old Garment section
  const handleOldGarmentAddressClick = () => {
    setSelectedOption('oldGarment');
    setAddressSelectionFor('oldGarment');
    
    // Fetch addresses when opening the sheet
    if (isAuthenticated && firebaseUser) {
      fetchAddresses();
    }
    
    // Show the address sheet
    setShowOldGarmentAddressSheet(true);
  };
  
  const isSchedulingValid = () => {
    return selectedDate && selectedTimeSlot;
  };
  
  const handleContinue = () => {
    // For home service, validate address and scheduling
    if (selectedOption === 'homeService') {
      if (!addressSelected) {
        setShowHomeAddressSheet(true);
        return;
      }
      if (!isSchedulingValid()) {
        // Show an error or focus on the scheduling section
        return;
      }
    }
    // For old garment, validate address
    if (selectedOption === 'oldGarment' && !addressSelected) {
      setShowOldGarmentAddressSheet(true);
      return;
    }
    

    
    // For manual measurements, validate form
    if (selectedOption === 'manual' && !isFormValid) {
      // Form validation is handled by the isFormValid state
      // Just focus on the form
      formRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
      return;
    }
    
    // Update order context with the selected option and data
    const updatedOrder = { ...order, measurementOption: selectedOption };
    
    if (selectedOption === 'manual') {
      updatedOrder.measurements = measurements;
    } else if (selectedOption === 'homeService') {
      // Store scheduling info in a compatible format
      updatedOrder.scheduledDate = selectedDate;
      updatedOrder.scheduledTime = selectedTimeSlot;
    }
    
    updateOrder(updatedOrder);
    
    // Navigate to next step
    navigate('/delivery-address');
  };
  
  // Render skeleton loading state
  if (loading) {
    return (
      <div className="container max-w-4xl mx-auto px-4 py-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-2/3 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-40 bg-gray-200 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="bg-gray-50 min-h-screen pb-20">
      {/* Top navigation */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-30">
        <div className="container max-w-4xl mx-auto px-4 md:px-6 py-3 md:py-4">
          <h1 className="text-xl md:text-2xl font-bold text-gray-900">
            Measurement Details
          </h1>
          <p className="text-sm text-gray-500 mt-1">
            Select how you'd like to provide your measurements
          </p>
        </div>
      </div>
      
      <div className="container max-w-4xl mx-auto px-4 md:px-6 pt-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden mb-6">
          <div className="p-4 md:p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              Choose a Measurement Option
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-6">
              {measurementOptions.map((option) => (
                <button
                  key={option.id}
                  className={`flex flex-col items-center text-center p-4 md:p-5 border-2 rounded-xl transition-all ${
                    selectedOption === option.id
                      ? 'border-plum bg-plum/5'
                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                  }`}
                  onClick={() => handleOptionSelect(option.id as "manual" | "homeService" | "oldGarment")}
                >
                  <div className="w-12 h-12 rounded-full bg-plum/10 flex items-center justify-center mb-3">
                    {getIconComponent(option.icon)}
                  </div>
                  <h3 className="font-medium text-gray-900 mb-1">{option.name}</h3>
                  <p className="text-sm text-gray-500">{option.description}</p>
                </button>
              ))}
            </div>
            
            {/* Selected option details */}
            {selectedOption && (
              <div className="mt-8">
                {/* Home Service Option */}
                {selectedOption === 'homeService' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-semibold mb-4 flex items-center">
                        <MapPin className="w-5 h-5 text-plum mr-2" />
                        Measurement Address
                      </h3>
                      
                      <button
                        className="w-full p-4 border border-gray-200 rounded-lg text-left flex justify-between items-center hover:border-gray-300 hover:bg-gray-50 transition-colors"
                        onClick={() => {
                          // Set the context for address selection
                          setAddressSelectionFor('homeService');
                          // Show the home service address sheet
                          setShowHomeAddressSheet(true);
                        }}
                      >
                        <div>
                          <span className="block font-medium">
                            {selectedAddress ? selectedAddress.fullName : "Select Address"}
                          </span>
                          <span className="text-sm text-gray-500">
                            {selectedAddress 
                              ? `${selectedAddress.addressLine1}, ${selectedAddress.area}, ${selectedAddress.pincode}` 
                              : addressSelectionFor === 'homeService' ? "Choose where you'd like our tailor to visit" : "Choose where we should pick up your garment"}
                          </span>
                        </div>
                        <ChevronRight className="w-5 h-5 text-gray-400" />
                      </button>
                      
                      {/* Home Service Address Sheet */}
                      {showHomeAddressSheet && (
                        <div className="fixed inset-0 bg-black/50 z-50 flex items-end sm:items-center justify-center">
                          <div className="bg-white w-full sm:w-[480px] sm:rounded-xl max-h-[90vh] overflow-hidden flex flex-col">
                            {/* Header */}
                            <div className="p-4 border-b border-gray-200 flex justify-between items-center">
                              <h3 className="text-lg font-semibold">Select Address for Home Service</h3>
                              <button 
                                className="p-1 rounded-full hover:bg-gray-100" 
                                onClick={() => setShowHomeAddressSheet(false)}
                              >
                                <X className="w-5 h-5" />
                              </button>
                            </div>
                            
                            {/* Content */}
                            <div className="flex-1 overflow-auto p-4">
                              {loadingAddresses ? (
                                <div className="flex justify-center items-center py-8">
                                  <Loader className="w-6 h-6 text-plum animate-spin" />
                                  <span className="ml-2 text-gray-600">Loading addresses...</span>
                                </div>
                              ) : isAuthenticated ? (
                                <>
                                  {addresses.length > 0 ? (
                                    <RadioGroup defaultValue={selectedAddressId}>
                                      <div className="space-y-3">
                                        {addresses.map((address) => (
                                          <div 
                                            key={address.id} 
                                            className={`border rounded-lg p-3 cursor-pointer transition-colors ${selectedAddressId === address.id ? 'border-plum bg-plum/5' : 'border-gray-200 hover:border-gray-300'}`}
                                            onClick={() => handleAddressSelect(address)}
                                          >
                                            <div className="flex items-start">
                                              <div className="mr-3 mt-0.5">
                                                <RadioGroupItem value={address.id} id={address.id} />
                                              </div>
                                              <div className="flex-1">
                                                <div className="flex items-center mb-1">
                                                  <span className="font-medium">{address.fullName}</span>
                                                  {address.isDefault && (
                                                    <span className="ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full">Default</span>
                                                  )}
                                                  {address.type === 'home' && <Home className="ml-auto w-4 h-4 text-gray-400" />}
                                                  {address.type === 'work' && <Briefcase className="ml-auto w-4 h-4 text-gray-400" />}
                                                  {address.type === 'other' && <MapPin className="ml-auto w-4 h-4 text-gray-400" />}
                                                </div>
                                                <div className="text-sm text-gray-600">
                                                  {address.addressLine1}
                                                </div>
                                                <div className="text-sm text-gray-600">
                                                  {address.area}, {address.pincode}
                                                </div>
                                                <div className="text-sm text-gray-600 mt-1">
                                                  {address.phone}
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        ))}
                                      </div>
                                    </RadioGroup>
                                  ) : (
                                    <div className="text-center py-8">
                                      <MapPin className="mx-auto h-10 w-10 text-gray-400 mb-3" />
                                      <h3 className="text-lg font-medium text-gray-900 mb-1">No addresses found</h3>
                                      <p className="text-gray-500 mb-4">You don't have any saved addresses yet.</p>
                                      <button 
                                        className="inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-white bg-plum rounded-md hover:bg-plum/90"
                                        onClick={() => navigate('/addresses')}
                                      >
                                        <Plus className="mr-2 h-4 w-4" /> Add New Address
                                      </button>
                                    </div>
                                  )}
                                  
                                  <div className="border-t border-gray-200 mt-4 pt-4">
                                    <button 
                                      className="w-full flex items-center justify-center px-4 py-2 text-sm font-medium text-plum border border-plum rounded-md hover:bg-plum/5"
                                      onClick={() => navigate('/addresses')}
                                    >
                                      <Plus className="mr-2 h-4 w-4" /> Add New Address
                                    </button>
                                  </div>
                                </>
                              ) : (
                                <div className="space-y-4">
                                  <div className="text-center py-6">
                                    <h3 className="text-lg font-medium text-gray-900 mb-1">Enter Delivery Pincode</h3>
                                    <p className="text-sm text-gray-500 mb-4">Please enter your pincode for tailor service availability.</p>
                                    
                                    <form className="max-w-xs mx-auto" onSubmit={(e) => {
                                      e.preventDefault();
                                      const input = e.currentTarget.querySelector('input');
                                      if (input && input.value.length === 6) {
                                        handleManualPincodeSubmit(input.value);
                                      }
                                    }}>
                                      <div className="flex">
                                        <input 
                                          type="text" 
                                          pattern="[0-9]*" 
                                          inputMode="numeric" 
                                          maxLength={6}
                                          className="flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum" 
                                          placeholder="Enter 6-digit pincode"
                                        />
                                        <button 
                                          type="submit" 
                                          className="bg-plum text-white px-4 py-2 rounded-r-md hover:bg-plum/90"
                                        >
                                          Apply
                                        </button>
                                      </div>
                                    </form>
                                  </div>
                                  
                                  <div className="text-center">
                                    <p className="text-sm text-gray-500 mb-2">OR</p>
                                    <button 
                                      className="inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-plum border border-plum rounded-md hover:bg-plum/5"
                                      onClick={() => {
                                        // Get current location logic would go here
                                        toast({
                                          title: "Getting your location",
                                          description: "Please allow location access when prompted."
                                        });
                                      }}
                                    >
                                      <Navigation className="mr-2 h-4 w-4" /> Use current location
                                    </button>
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Appointment scheduling */}
                    <div>
                      <h3 className="text-lg font-semibold mb-4 flex items-center">
                        <Calendar className="w-5 h-5 text-plum mr-2" />
                        Schedule Appointment
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <p className="text-sm text-gray-700 mb-2">Select Date</p>
                          <div className="grid grid-cols-3 md:grid-cols-7 gap-2">
                            {availableDates.map((date) => (
                              <button
                                key={date.value}
                                className={`p-3 text-center border rounded-lg text-sm transition-colors ${
                                  selectedDate === date.value
                                    ? 'bg-plum text-white border-plum'
                                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                                }`}
                                onClick={() => setSelectedDate(date.value)}
                              >
                                {date.label}
                              </button>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <p className="text-sm text-gray-700 mb-2">Select Time Slot</p>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                            {timeSlots.map((slot) => (
                              <button
                                key={slot}
                                className={`p-3 text-center border rounded-lg text-sm transition-colors ${
                                  selectedTimeSlot === slot
                                    ? 'bg-plum text-white border-plum'
                                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                                }`}
                                onClick={() => setSelectedTimeSlot(slot)}
                              >
                                <div className="flex items-center justify-center gap-1">
                                  <Clock className="w-3 h-3" />
                                  <span>{slot}</span>
                                </div>
                              </button>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Manual Measurements Option */}
                {selectedOption === 'manual' && (
                  <div>
                    <h3 className="text-lg font-semibold mb-4 flex items-center">
                      <Ruler className="w-5 h-5 text-plum mr-2" />
                      Enter Your Measurements
                    </h3>
                    
                    <form ref={formRef} className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Bust (inches)</label>
                          <input
                            type="text"
                            name="bust"
                            value={measurements.bust}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.bust ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 36"
                          />
                          {formErrors.bust && <p className="text-red-500 text-xs mt-1">{formErrors.bust}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Waist (inches)</label>
                          <input
                            type="text"
                            name="waist"
                            value={measurements.waist}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.waist ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 28"
                          />
                          {formErrors.waist && <p className="text-red-500 text-xs mt-1">{formErrors.waist}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Hips (inches)</label>
                          <input
                            type="text"
                            name="hips"
                            value={measurements.hips}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.hips ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 38"
                          />
                          {formErrors.hips && <p className="text-red-500 text-xs mt-1">{formErrors.hips}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Shoulder to Waist (inches)</label>
                          <input
                            type="text"
                            name="shoulderToWaist"
                            value={measurements.shoulderToWaist}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.shoulderToWaist ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 16"
                          />
                          {formErrors.shoulderToWaist && <p className="text-red-500 text-xs mt-1">{formErrors.shoulderToWaist}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Arm Length (inches)</label>
                          <input
                            type="text"
                            name="armLength"
                            value={measurements.armLength}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.armLength ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 22"
                          />
                          {formErrors.armLength && <p className="text-red-500 text-xs mt-1">{formErrors.armLength}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Arm Hole (inches)</label>
                          <input
                            type="text"
                            name="armHole"
                            value={measurements.armHole}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.armHole ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 16"
                          />
                          {formErrors.armHole && <p className="text-red-500 text-xs mt-1">{formErrors.armHole}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Arm Circumference (inches)</label>
                          <input
                            type="text"
                            name="armCircumference"
                            value={measurements.armCircumference}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.armCircumference ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 12"
                          />
                          {formErrors.armCircumference && <p className="text-red-500 text-xs mt-1">{formErrors.armCircumference}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Neck Depth (Front) (inches)</label>
                          <input
                            type="text"
                            name="neckDepthFront"
                            value={measurements.neckDepthFront}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.neckDepthFront ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 3"
                          />
                          {formErrors.neckDepthFront && <p className="text-red-500 text-xs mt-1">{formErrors.neckDepthFront}</p>}
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Neck Depth (Back) (inches)</label>
                          <input
                            type="text"
                            name="neckDepthBack"
                            value={measurements.neckDepthBack}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum ${formErrors.neckDepthBack ? 'border-red-500' : 'border-gray-300'}`}
                            placeholder="e.g., 2"
                          />
                          {formErrors.neckDepthBack && <p className="text-red-500 text-xs mt-1">{formErrors.neckDepthBack}</p>}
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Additional Notes (Optional)</label>
                        <textarea
                          name="additional"
                          value={measurements.additional}
                          onChange={handleInputChange}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-plum/50 focus:border-plum min-h-[80px]"
                          placeholder="Any specific requirements or details..."
                        ></textarea>
                      </div>
                    </form>
                  </div>
                )}
                
                {/* Old Garment Option */}
                {selectedOption === 'oldGarment' && (
                  <div className="space-y-6">
                    <div className="bg-plum/5 p-4 rounded-lg border border-plum/10">
                      <h3 className="text-lg font-semibold mb-3 flex items-center">
                        <Package className="w-5 h-5 text-plum mr-2" />
                        Send Your Old Garment
                      </h3>
                      <p className="text-gray-700 mb-4">
                        Please send us a well-fitting garment similar to what you'd like us to create. We'll use it to take accurate measurements.
                      </p>
                      <ul className="space-y-2 mb-4">
                        <li className="flex items-start gap-2">
                          <Check className="w-4 h-4 text-plum mt-0.5 flex-shrink-0" />
                          <span className="text-sm">Package your garment securely</span>
                        </li>
                        <li className="flex items-start gap-2">
                          <Check className="w-4 h-4 text-plum mt-0.5 flex-shrink-0" />
                          <span className="text-sm">Ensure it's clean and pressed</span>
                        </li>
                        <li className="flex items-start gap-2">
                          <Check className="w-4 h-4 text-plum mt-0.5 flex-shrink-0" />
                          <span className="text-sm">We'll return it with your new order</span>
                        </li>
                        <li className="flex items-start gap-2">
                          <Check className="w-4 h-4 text-plum mt-0.5 flex-shrink-0" />
                          <span className="text-sm">Shipping instructions will be provided after order confirmation</span>
                        </li>
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="text-lg font-semibold mb-4 flex items-center">
                        <MapPin className="w-5 h-5 text-plum mr-2" />
                        Pickup Address
                      </h3>
                      
                      <button
                        className="w-full p-4 border border-gray-200 rounded-lg text-left flex justify-between items-center hover:border-gray-300 hover:bg-gray-50 transition-colors"
                        onClick={() => {
                          // Set the context for address selection
                          setAddressSelectionFor('oldGarment');
                          // Show the old garment address sheet
                          setShowOldGarmentAddressSheet(true);
                        }}
                      >
                        <div>
                          <span className="block font-medium">
                            {selectedAddress ? selectedAddress.fullName : "Select Address"}
                          </span>
                          <span className="text-sm text-gray-500">
                            {selectedAddress 
                              ? `${selectedAddress.addressLine1}, ${selectedAddress.area}, ${selectedAddress.pincode}` 
                              : "Choose where we should pick up your garment"}
                          </span>
                        </div>
                        <ChevronRight className="w-5 h-5 text-gray-400" />
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        
        {/* Help section */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 md:p-6 mb-20">
          <div className="flex items-start gap-3">
            <div className="bg-plum/10 p-2 rounded-full">
              <Info className="w-5 h-5 text-plum" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2">Measurement Tips</h3>
              <p className="text-gray-600 mb-2">
                For the most accurate measurements, wear form-fitting clothes and stand straight with your arms relaxed at your sides.
              </p>
              <p className="text-gray-600">
                If you're unsure about taking measurements yourself, our home measurement service or using an existing garment are excellent alternatives.
              </p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Sticky Continue button */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 z-40">
        <div className="container max-w-4xl mx-auto">
          <button 
            onClick={handleContinue}
            className={`w-full py-3 rounded-xl font-medium transition-colors ${(selectedOption && 
              ((selectedOption === 'manual' && isFormValid) || 
              (selectedOption === 'oldGarment') || 
              (selectedOption === 'homeService' && addressSelected && isSchedulingValid()))) ? 
              'bg-plum hover:bg-plum/90 text-white font-semibold' : 
              'bg-gray-200 text-gray-500 cursor-not-allowed'}`}
            disabled={!selectedOption || 
              (selectedOption === 'manual' && !isFormValid) || 
              (selectedOption === 'homeService' && (!addressSelected || !isSchedulingValid())) ||
              (selectedOption === 'oldGarment' && !addressSelected)}
          >
            {!selectedOption ? (
              "Select a measurement option"
            ) : selectedOption === 'manual' && !isFormValid ? (
              "Complete all measurements"
            ) : selectedOption === 'homeService' && !selectedAddress && !addressSelected ? (
              "Select delivery address"
            ) : selectedOption === 'oldGarment' && !selectedAddress && !addressSelected ? (
              "Select pickup address"
            ) : selectedOption === 'homeService' && !isSchedulingValid() ? (
              "Select date and time"
            ) : (
              "Continue"
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default MeasurementPage;
